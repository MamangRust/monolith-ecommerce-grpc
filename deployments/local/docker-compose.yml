services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres_ecommerce
    environment:
      POSTGRES_USER: DRAGON
      POSTGRES_PASSWORD: DRAGON
      POSTGRES_DB: ECOMMERCE
    ports:
      - "5432:5432"
    volumes:
      - postgres_ecommerce_data:/var/lib/postgresql/data
    networks:
      - app_ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U DRAGON -d ECOMMERCE"]
      interval: 5s
      timeout: 5s
      retries: 5
  migrate:
    image: migrate-ecommerce-service:1.0
    container_name: migrate-ecommerce
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    env_file: ./docker.env
    environment:
      APP_ENV: docker
      DB_URL: postgres://DRAGON:DRAGON@postgres/ECOMMERCE
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy

  apigateway:
    image: apigateway-ecommerce-service:1.0
    container_name: apigateway-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
      - ./uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth:
        condition: service_started
      role:
        condition: service_started
      user:
        condition: service_started
      category:
        condition: service_started
      merchant:
        condition: service_started
      order-item:
        condition: service_started
      order:
        condition: service_started
      product:
        condition: service_started
      transaction:
        condition: service_started
      cart:
        condition: service_started
      review:
        condition: service_started
      slider:
        condition: service_started
      shipping_address:
        condition: service_started
      banner:
        condition: service_started
      merchant_award:
        condition: service_started
      merchant_business:
        condition: service_started
      merchant_detail:
        condition: service_started
      merchant_policy:
        condition: service_started
      review_detail:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092


  auth:
    image: auth-ecommerce-service:1.0
    container_name: auth-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  role:
    image: role-ecommerce-service:1.0
    container_name: role-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  user:
    image: user-ecommerce-service:1.0
    container_name: user-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    ports:
      - "50053"
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  email:
    image: email-ecommerce-service:1.0
    container_name: email
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  category:
    image: category-ecommerce-service:1.0
    container_name: category-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant:
    image: merchant-ecommerce-service:1.0
    container_name: merchant-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  order-item:
    image: order_item-ecommerce-service:1.0
    container_name: order-item-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  order:
    image: order-ecommerce-service:1.0
    container_name: order-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  product:
    image: product-ecommerce-service:1.0
    container_name: product-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  transaction:
    image: transaction-ecommerce-service:1.0
    container_name: transaction-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  cart:
    image: cart-ecommerce-service:1.0
    container_name: cart-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  review:
    image: review-ecommerce-service:1.0
    container_name: review-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  slider:
    image: slider-ecommerce-service:1.0
    container_name: slider-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  shipping_address:
    image: shipping_address-ecommerce-service:1.0
    container_name: shipping_address-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  banner:
    image: banner-ecommerce-service:1.0
    container_name: banner-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant_award:
    image: merchant_award-ecommerce-service:1.0
    container_name: merchant_award-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant_business:
    image: merchant_business-ecommerce-service:1.0
    container_name: merchant_business-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant_detail:
    image: merchant_detail-ecommerce-service:1.0
    container_name: merchant_detail-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  merchant_policy:
    image: merchant_policy-ecommerce-service:1.0
    container_name: merchant_policy-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  review_detail:
    image: review_detail-ecommerce-service:1.0
    container_name: review_detail-ecommerce
    env_file: ./docker.env
    volumes:
      - ./docker.env:/app/docker.env
      - ./logs:/var/log/app
    networks:
      - app_ecommerce_network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      otel-collector:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - OTEL_ENDPOINT=otel-collector:4317
      - APP_ENV=docker
      - KAFKA_BROKERS=kafka:9092

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: my-zookeeper-ecommerce
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app_ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    container_name: my-kafka-ecommerce
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-01
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_ecommerce_data:/bitnami/kafka
    networks:
      - app_ecommerce_network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.9.0
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    networks:
      - app_ecommerce_network
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - "--kafka.server=my-kafka-ecommerce:9092"
      - "--web.listen-address=0.0.0.0:9308"
      - "--log.level=debug"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9308/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../observability/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ../../observability/rules:/etc/prometheus/rules
    networks:
      - app_ecommerce_network
    depends_on:
      - otel-collector
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_ecommerce
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_ecommerce-storage:/var/lib/grafana
    networks:
      - app_ecommerce_network
    depends_on:
      - prometheus
      - jaeger
      - alertmanager
      - loki

  nginx:
    image: nginx:alpine
    container_name: nginx_ecommerce
    ports:
      - "80:80"
    volumes:
      - ../../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - apigateway
    networks:
      - app_ecommerce_network

  redis:
    image: redis:7.4
    container_name: redis_ecommerce
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    ports:
      - "6379:6379"
    volumes:
      - redis_ecommerce_data:/data
      - ../../redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - app_ecommerce_network


  node-exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter_ecommerce
    pid: "host"
    networks:
      - app_ecommerce_network
    volumes:
      - "/:/host:ro,rslave"
    command:
      - '--path.rootfs=/host'

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector-ecommerce
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ../../observability/otel-collector.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
      - "8889:8889"
    networks:
      - app_ecommerce_network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.62.0
    container_name: jaeger-ecommerce
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - app_ecommerce_network
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager_ecommerce
    volumes:
      - ../../observability/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    networks:
      - app_ecommerce_network

  loki:
    container_name: loki_ecommerce
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ../../observability/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_ecommerce_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app_ecommerce_network

  promtail:
    container_name: promtail_ecommerce
    image: grafana/promtail:2.9.0
    volumes:
      - ../../observability/promtail-config.yaml:/etc/promtail/config.yaml
      - ./logs:/var/log/app
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - app_ecommerce_network


volumes:
  loki_ecommerce_data:
  grafana_ecommerce-storage:
  postgres_ecommerce_data:
  kafka_ecommerce_data:
  redis_ecommerce_data:

networks:
  app_ecommerce_network:
    driver: bridge